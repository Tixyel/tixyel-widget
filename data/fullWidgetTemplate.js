//

module.exports = {
  name: '00 - Widget Sample',

  files: [
    {
      name: 'development',
      files: [
        {
          fileName: 'index.html',
          content:
            "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Preview</title>\n\n    <!-- Script and Simulation -->\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js\"></script>\n\n    <link rel=\"stylesheet\" href=\"./style.css\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n\n    <script src=\"./script.js\" crossorigin=\"anonymous\"></script>\n    <script src=\"./script.jsx\" crossorigin=\"anonymous\"></script>\n\n    <script src=\"../simulation/latest.js\" crossorigin=\"anonymous\"></script>\n    <script src=\"../../simulation.js\" crossorigin=\"anonymous\"></script>\n    <script src=\"./simulation.js\" crossorigin=\"anonymous\"></script>\n\n    <!-- Utils -->\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js\" title=\"lottie-script\"></script>\n\n    <!-- Settings & Type of widget (all/events/messages/timer) -->\n\n    <meta property=\"widget:settings\" data-type=\"all\" data-enable-outline=\"true\" data-enable-eye=\"true\" />\n  </head>\n  <body>\n    <!-- Production scripts -->\n\n    <script src=\"{simulation}\" version=\"\"></script>\n    <main></main>\n\n    <!-- Widget above -->\n  </body>\n</html>\n\n<!-- Simulation -->\n\n<script async title=\"SE_API\">\n  const SE_API = {\n    getOverlayStatus: async () => {\n      return {\n        isEditorMode: false,\n        muted: false,\n      }\n    },\n    resumeQueue: () => queue && queue?.resumeQueue(),\n\n    store: {\n      set: function (name, obj) {\n        this.list[name] = obj\n      },\n      get: async function (name) {\n        if (this.list[name]) return this.list[name]\n        else return null\n      },\n      list: {},\n    },\n  }\n\n  queue = new Queue(0, false, true, ({ event, data }) => {\n    window.dispatchEvent(new CustomEvent(event, data))\n  })\n\n  setTimeout(() => {\n    queue.setNewDuration(fields['widgetDuration'] || 0)\n  }, 500)\n</script>\n\n<script async title=\"simulation\">\n  let SE_TEMPLATE = `<div class=\"simulation\"><button class=\"outline\"><i class=\"fi fi-sr-sensor-on\"></i></button><div class=\"controller\">{buttons}<div class=\"move\"> <div class=\"points\">...</div> </div></div><button class=\"switch\"><i class=\"fi fi-sr-eye\"></i></button></div>`,\n    SE_TYPE = $('meta[property=\"widget:settings\"]').data('type') || 'all',\n    SE_BUTTONS = {\n      content: [],\n      message: `<button onclick=\"simulate({listener: 'message'})\">  <i class=\"fi fi-sr-comment-alt-dots\"></i>  </button>`,\n      event: `<button onclick=\"simulate({listener: 'event'})\">  <i class=\"fi fi-sr-calendar-star\"></i>  </button>`,\n      session: `<button onclick=\"simulate({}, true)\">  <i class=\"fi fi-sr-file-user\"></i>  </button>`,\n      shuffle: `<button onclick=\"simulate({listener: 'random'})\">  <i class=\"fi fi-br-shuffle\"></i>  </button>`,\n      trash: `<button onclick=\"removeRow(2)\">  <i class=\"fi fi-sr-trash-xmark\"></i>  </button>`,\n      resumeQueue: `<button onclick=\"queue?.resumeQueue()\">  <i class=\"fi fi-sr-forward\"></i>  </button>`,\n      simulation: `<button class=\"simulation\">  <i class=\"fi fi-sr-play\"></i>  </button>`,\n      addTime: `<button onclick=\"timer?.addTime(15)\">  <i class=\"fi fi-sr-time-add\"></i>  </button>`,\n      removeTime: `<button onclick=\"timer?.removeTime(15)\">  <i class=\"fi fi-sr-time-delete\"></i>  </button>`,\n    }\n\n  ;['all', 'everything'].some((e) => SE_TYPE == e) &&\n    SE_BUTTONS.content.push('message', 'event', 'session', 'shuffle', 'trash', 'resumeQueue', 'simulation')\n  ;['event', 'events', 'goal'].some((e) => SE_TYPE == e) && SE_BUTTONS.content.push('event', 'session', 'simulation')\n  ;['message', 'messages'].some((e) => SE_TYPE == e) && SE_BUTTONS.content.push('message', 'simulation')\n  ;['subathon', 'timer', 'timers'].some((e) => SE_TYPE == e) && SE_BUTTONS.content.push('event', 'session', 'addTime', 'removeTime', 'simulation')\n\n  const SE_GENERATE = (arr = []) => {\n    $('body').append(\n      SE_TEMPLATE.replace(\n        '{buttons}',\n        Object.entries(SE_BUTTONS)\n          .filter(([key, value]) => arr.some((el) => key == el) && key != 'content')\n          .sort((a, b) => arr.indexOf(b[0]) - arr.indexOf(a[0]))\n          .reduce((acc, [key, value]) => {\n            acc = [value, ...acc]\n            return acc\n          }, [])\n          .join(''),\n      ),\n    )\n  }\n\n  SE_GENERATE(SE_BUTTONS.content)\n\n  $('meta[property=\"widget:settings\"]').data('enable-eye') == false && $('body > div.simulation > button.switch').css({ 'display': 'none' })\n  $('meta[property=\"widget:settings\"]').data('enable-outline') == false && $('body > div.simulation > button.outline').css({ 'display': 'none' })\n\n  $('body > div.simulation > div.controller > button.simulation').click(function () {\n    const enable = () => {\n        simulateEvents(1500)\n\n        $(this).children().last().removeClass('fi-sr-play').addClass('fi-sr-pause')\n      },\n      disable = () => {\n        stopSimulation()\n\n        $(this).children().last().removeClass('fi-sr-pause').addClass('fi-sr-play')\n      }\n\n    $(this).children().last().hasClass('fi-sr-play') ? enable() : disable()\n  })\n\n  $('body > div.simulation > button.outline').click(function () {\n    const enable = () => {\n        $('*').css({ 'outline': '1px solid transparent' })\n        $(this).children().last().removeClass('fi-rr-sensor-on closed').addClass('fi-sr-sensor-on')\n      },\n      disable = () => {\n        $('*').css({ 'outline': '1px solid #c3a7e250' })\n        $(this).children().last().removeClass('fi-sr-sensor-on').addClass('fi-rr-sensor-on closed')\n      }\n\n    $(this).children().last().hasClass('fi-sr-sensor-on') ? disable() : enable()\n  })\n\n  $('body > div.simulation > button.switch').click(function () {\n    const enable = () => {\n        $(this).children().last().removeClass('fi-sr-eye-crossed closed').addClass('fi-sr-eye')\n\n        $('body > div.simulation > div.controller').css({ 'display': 'flex' })\n      },\n      disable = () => {\n        $(this).children().last().removeClass('fi-sr-eye').addClass('fi-sr-eye-crossed closed')\n\n        $('body > div.simulation > div.controller').css({ 'display': 'none' })\n      }\n\n    $(this).children().last().hasClass('fi-sr-eye') ? disable() : enable()\n  })\n\n  const SE_POSITION = { x: 0, y: 0 }\n\n  interact('body > div.simulation > div.controller').draggable({\n    listeners: {\n      start(event) {},\n      move(event) {\n        SE_POSITION.x += event.dx\n        SE_POSITION.y += event.dy\n\n        $(event.target).css({ 'translate': `calc(-50% + ${SE_POSITION.x}px) ${SE_POSITION.y}px` })\n      },\n    },\n    modifiers: [\n      interact.modifiers.restrict({\n        restriction: 'parent',\n        endOnly: false,\n      }),\n    ],\n  })\n\n  setTimeout(\n    () => fields['debug'] && $('body > div.simulation > div.controller > button.simulation > i').removeClass('fi-sr-play').addClass('fi-sr-pause'),\n    500,\n  )\n</script>\n\n<style>\n  @import url('https://cdn-uicons.flaticon.com/uicons-bold-rounded/css/uicons-bold-rounded.css');\n  @import url('https://cdn-uicons.flaticon.com/2.0.0/uicons-solid-rounded/css/uicons-solid-rounded.css');\n  @import url('https://cdn-uicons.flaticon.com/2.0.0/uicons-regular-rounded/css/uicons-regular-rounded.css');\n\n  body {\n    --grid-size: 40px;\n    --grid-strength: 1px;\n    --grid-dash: 10px;\n    --grid-gap: 5px;\n    --grid-space-color: transparent;\n    --grid-color: #b3989820;\n    --paper-color: #65676d;\n\n    background-color: var(--paper-color);\n    background-size: var(--grid-dash) var(--grid-dash), var(--grid-size) var(--grid-size);\n    background-image: linear-gradient(to bottom, var(--grid-space-color) var(--grid-gap), var(--paper-color) var(--grid-gap)),\n      linear-gradient(to right, var(--grid-color) var(--grid-strength), var(--grid-space-color) var(--grid-strength)),\n      linear-gradient(to right, var(--grid-space-color) var(--grid-gap), var(--paper-color) var(--grid-gap)),\n      linear-gradient(to bottom, var(--grid-color) var(--grid-strength), var(--grid-space-color) var(--grid-strength));\n\n    outline: none !important;\n  }\n\n  body > div.simulation {\n    position: absolute;\n\n    --padding: 80px;\n    --padding-v: 200px;\n    width: calc(100% - var(--padding-v));\n    height: calc(100% - var(--padding));\n\n    left: 50%;\n    top: 50%;\n\n    translate: -50% -50%;\n\n    z-index: 9999999999999999;\n\n    outline: none !important;\n    pointer-events: none;\n  }\n\n  body > div.simulation button {\n    pointer-events: all;\n  }\n\n  body > div.simulation > button.outline {\n    position: absolute;\n\n    background-color: transparent;\n\n    --spacing: -20px;\n    left: calc(-100px - var(--spacing));\n    top: calc(-40px - var(--spacing));\n    outline: none !important;\n  }\n\n  body > div.simulation > button.switch {\n    position: absolute;\n\n    background-color: transparent;\n\n    --spacing: -20px;\n    right: calc(-100px - var(--spacing));\n    top: calc(-40px - var(--spacing));\n    outline: none !important;\n  }\n\n  body > div.simulation > button.switch > i,\n  body > div.simulation > button.outline > i {\n    color: #c3a7e2;\n    font-size: 20px;\n    vertical-align: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    transition: scale 400ms ease-in-out, color 200ms ease-in-out;\n    outline: none !important;\n  }\n\n  body > div.simulation > button.switch:hover > i,\n  body > div.simulation > button.outline:hover > i {\n    scale: 0.9;\n  }\n\n  body > div.simulation > button.switch > i.closed,\n  body > div.simulation > button.outline > i.closed {\n    color: #987abb;\n  }\n\n  body > div.simulation > div.controller {\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n\n    width: max-content;\n    max-width: max-content;\n\n    padding: 5px 20px;\n    gap: 5px;\n\n    background-color: #c3a7e2;\n\n    filter: drop-shadow(0 0 20px #150a22);\n\n    border-radius: 10px 10px 30px 30px;\n\n    left: 50%;\n    translate: -50%;\n\n    z-index: 5;\n    overflow: visible;\n\n    cursor: default !important;\n  }\n\n  body > div.simulation > div.controller > div.move {\n    pointer-events: all;\n\n    position: absolute;\n\n    width: 100px;\n    height: 25px;\n\n    z-index: -1;\n\n    margin-bottom: -10px;\n    transition: margin-bottom 1s 100ms;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n\n    cursor: move;\n    outline: none !important;\n  }\n\n  body > div.simulation > div.controller:hover > div.move {\n    margin-bottom: -30px;\n  }\n\n  body > div.simulation > div.controller > div.move > div.points {\n    width: max-content;\n    opacity: 0;\n    font-size: 30px;\n    text-align: center;\n\n    color: #c3a7e2;\n    letter-spacing: 0px;\n\n    --letter-spacing: 5px;\n    margin-bottom: 15px;\n    padding-left: 0px;\n\n    transition: opacity 1s, letter-spacing 1s, padding-left 1s;\n    outline: none !important;\n  }\n\n  body > div.simulation > div.controller:hover > div.move > div.points {\n    opacity: 1;\n  }\n\n  body > div.simulation > div.controller > div.move:hover > div.points {\n    letter-spacing: var(--letter-spacing);\n    padding-left: var(--letter-spacing);\n  }\n\n  body > div.simulation > div.controller > button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    background: transparent;\n    cursor: pointer;\n\n    aspect-ratio: 1/1;\n\n    width: 30px;\n  }\n\n  body > div.simulation > div.controller > button > i.fi {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    vertical-align: middle;\n\n    color: #281440;\n\n    aspect-ratio: 1/1;\n\n    --size: 20px;\n    font-size: var(--size);\n    width: var(--size);\n\n    transform-origin: center center;\n    transition: scale 400ms ease-in-out, color 400ms ease-in-out;\n  }\n\n  body > div.simulation > div.controller > button:hover > i.fi {\n    color: #190f25;\n    scale: 1.15;\n  }\n\n  body > div.simulation > div.controller > button:active > i.fi {\n    transition-duration: 100ms, 200ms;\n    color: #5f477a;\n    scale: 0.98;\n  }\n</style>\n",
        },
        {
          fileName: 'script.jsx',
          content:
            "const events = {\n    // Twitch\n\n    'follower': {\n      'enabled': false,\n    },\n    'tip': {\n      'enabled': false,\n    },\n    'cheer': {\n      'enabled': false,\n    },\n    'subscriber': {\n      'enabled': false,\n    },\n    'resub': {\n      'enabled': false,\n    },\n    'gift': {\n      'enabled': false,\n    },\n    'community': {\n      'enabled': false,\n    },\n    'raid': {\n      'enabled': false,\n    },\n\n    // YouTube\n\n    'superchat': {\n      'enabled': false,\n    },\n    'sponsor': {\n      'enabled': false,\n    },\n  },\n  icons = {},\n  vectors = {}\n\n// Settings\n\nlet settings = {}\n\n$(window).one('onWidgetLoad', ({ detail: { fieldData } }) => {\n  fields = fieldData\n\n  // Available events\n\n  availableEvents.push('message', 'delete-message', 'delete-messages', 'event:test')\n\n  filterFields([['Enabled', ([key, value]) => value && data.listeners.includes(key) && availableEvents.push(key + '-latest')]])\n\n  // Settings\n\n  badgeSettings['badges'] = fieldData['hideBadges']\n  maxRows = fieldData['maxRows']\n  cache.pronouns.enabled = !fieldData['hidePronouns']\n  ignoreCommands = fieldData['ignoreCommands']\n  ignoredUsers = fieldData['ignoredUsers']\n    .toLowerCase()\n    .replace(/s/g, (s) => ',')\n    .split(',')\n    .filter((n) => n.length > 0)\n\n  // Start\n\n  applyCf(fields, ['Size', 'Color', 'Duration', 'Weight', 'Gap'])\n\n  Object.entries(settings).forEach(([key, value]) => (document.querySelector(mainDiv).dataset[key] = value))\n})\n\n$(window).on('onEventReceived', ({ detail: { listener, event } }) => {\n  let { data } = event,\n    converted = convertListener(listener, event)\n\n  if (!availableEvents.includes(listener) || event?.isCommunityGift) return\n\n  switch (listener) {\n    case 'message':\n      if (ignoreCommands && data.text.startsWith('!')) return widget.warn(' BLOCKED MESSAGE ')\n      if (ignoredUsers.indexOf(data.nick.toLowerCase()) != -1) return widget.warn(' BLOCKED USERNAME ')\n\n      Promise.allSettled([getBadges(data, badgeSettings), fetchPronoun(data.nick), attachEmotes(data), isEmote(data)]).then(\n        ([getBadges, fetchPronoun, attachEmotes, isEmote]) => {\n          let { badges, role } = getBadges.value,\n            pronoun = fetchPronoun.value,\n            message = attachEmotes.value,\n            isEmoteOnly = isEmote.value\n\n          addMessage({\n            username: data.displayName || data.nick,\n            message,\n\n            badges,\n            role,\n            isEmoteOnly,\n            data,\n            pronoun,\n          })\n        },\n      )\n\n      break\n\n    case 'delete-message':\n      $(`div.row[data-msgid=\"${event.msgId}\"]`).remove()\n      break\n\n    case 'delete-messages':\n      $(`div.row[data-sender=\"${event.userId}\"]`).remove()\n      break\n\n    case 'event:test':\n      switch (event.field) {\n        case 'broadcasterMessage':\n          simulate({ name: 'Broadcaster', badges: 'broadcaster', message: 'This is a test message', listener: 'message' })\n          break\n        case 'moderatorMessage':\n          simulate({ name: 'Moderator', badges: 'moderator', message: 'This is a test message', listener: 'message' })\n          break\n        case 'subscriberMessage':\n          simulate({ name: 'Subscriber', badges: 'subscriber', message: 'This is a test message', listener: 'message' })\n          break\n        case 'vipMessage':\n          simulate({ name: 'VIP', badges: 'vip', message: 'This is a test message', listener: 'message' })\n          break\n        case 'followerMessage':\n          simulate({ name: 'Follower', badges: ' ', message: 'This is a test message', listener: 'message' })\n          break\n\n        case 'followerListener':\n          simulate({ name: 'Follower', listener: 'follower' })\n          break\n        case 'subscriberListener':\n          simulate({ name: 'Subscriber', listener: 'subscriber' })\n          break\n        case 'cheerListener':\n          simulate({ name: 'Donor', listener: 'cheer' })\n          break\n        case 'tipListener':\n          simulate({ name: 'Donor', listener: 'tip' })\n          break\n        case 'raidListener':\n          simulate({ name: 'Raider', listener: 'raid' })\n          break\n      }\n      break\n\n    default:\n      addEvent(event, converted)\n      break\n  }\n})\n\nfunction addMessage({ username, pronoun, message, role, isEmote, data: { userId, msgId } }) {\n  pronoun = pronoun ? `<pronoun>${pronoun}</pronoun>` : ''\n\n  let emote = isEmote[0] ? `data-emotes=\"${isEmote[2]}\"` : '',\n    data = `${align} ${emote} data-role=\"${role}\" data-sender=\"${userId}\" data-msgid=\"${msgId}\" id=\"row-${totalRows++}\"`\n\n  let template = `<div class=\"row message\" ${data}></div>`\n\n  addRow(template)\n}\n\nfunction addEvent(event, listener) {\n  let data = `data-event=\"${listener}\" id=\"row-${totalRows++}\"`,\n    template = `<div class=\"row event\" ${data}></div>  `\n\n  addRow(template)\n}\n\nfunction addRowInQueue(template) {\n  messageQueue && messageQueue.enqueue({ template })\n}\n\nfunction addRow(template) {\n  $(template)\n    .appendTo(mainDiv)\n    .queue(function () {\n      widget.warn(' ADDING ROW ')\n\n      $(this)\n        .css({ '--height': $(this).outerHeight().toString(), '--width': $(this).outerWidth().toString() })\n        .addClass('animationIn')\n        .dequeue()\n\n      moveTo(this)\n    })\n    .delay(messageHideDelay <= 0 ? 999999 : messageHideDelay * 1000)\n    .queue(function () {\n      $(this)\n        .removeClass('animationIn')\n        .addClass('animationOut')\n        .delay((fields['scrollDuration'] || 2) * 1500)\n        .queue(function () {\n          $(this).remove().dequeue()\n        })\n        .dequeue()\n    })\n\n  checkMainLength() && removeRow(fields['scrollDuration'] || 2)\n}\n\n// Utils\n\nfunction convertListener(listener, event) {\n  switch (listener) {\n    case 'subscriber-latest':\n      event?.amount > 1 && (listener = 'resub-latest')\n      event?.gifted && (listener = 'gift-latest')\n      event?.bulkGifted && (listener = 'community-latest')\n\n      break\n  }\n\n  return listener.replace('-latest', '')\n}\n\nfunction filterFields(array = []) {\n  !Array.isArray(array) && (array = Object.values(array))\n\n  if (Array.isArray(array))\n    for (let [word, callback, map] of array) {\n      !map && (map = ([key, value]) => [key.replace(word, '').trim(), value])\n\n      if (word && typeof word == 'string' && callback && typeof callback == 'function')\n        Object.entries(fields)\n          .filter(([key]) => key.endsWith(word))\n          .map(map)\n          .forEach(callback)\n    }\n  else if (argument[0] && typeof argument[0] == 'string' && argument[1] && typeof argument[1] == 'function')\n    Object.entries(fields)\n      .filter(([key]) => key.endsWith(arguments[0]))\n      .map(([key, value]) => [key.replace(arguments[0], ''), value])\n      .forEach(arguments[1])\n}\n",
        },
        {
          fileName: 'style.css',
          content:
            "/* Fonts and reset */\n@import url('https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;0,1000;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900;1,1000&display=swap');\n@import url('https://fonts.googleapis.com/css2?family={fontFamily}&display=swap');\n\n* {\n  border: 0;\n  margin: 0;\n  padding: 0;\n  appearance: none;\n  box-sizing: border-box;\n\n  /* outline: 1px solid #c3a7e250; */\n}\n\n/* Variables */\n\nmain {\n  --font-family: '{fontFamily}', 'Nunito', sans-serif;\n}\n\n/* Start */\n\nbody {\n  --min-width: 0;\n\n  width: 100dvw;\n  min-width: calc(var(--min-width) * 1px);\n  height: 100dvh;\n\n  overflow: hidden;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\nmain {\n  --main-width: 100%;\n  --main-height: 100%;\n\n  width: var(--main-width);\n  min-width: var(--main-width);\n  max-width: var(--main-width);\n  height: var(--main-height);\n  min-height: var(--main-height);\n  max-height: var(--main-height);\n\n  font-family: var(--font-family);\n}",
        },
        {
          fileName: 'cf.json',
          content:
            '{\n  "designerCredit": {\n    "type": "hidden",\n    "label": "Designer: @",\n    "group": "Debug Settings"\n  },\n  "devCredit": {\n    "type": "hidden",\n    "label": "Developer: @Tixyel",\n    "group": "Debug Settings"\n  },\n\n  "debug": {\n    "type": "checkbox",\n    "label": "Debug with random events",\n    "value": false,\n    "group": "Debug Settings"\n  },\n  "autoScale": {\n    "type": "checkbox",\n    "label": "Disable auto scale",\n    "value": false,\n    "group": "Debug Settings"\n  },\n  "doNotModify": {\n    "type": "hidden",\n    "label": "Do not modify the value below",\n    "group": "Debug Settings"\n  },\n  "widgetDuration": {\n    "type": "hidden",\n    "value": 0,\n    "group": "Debug Settings"\n  },\n  "version": {\n    "type": "hidden",\n    "label": "Simulation",\n    "group": "Debug Settings"\n  },\n  "simulation": {\n    "type": "text",\n    "label": "Simulation script",\n    "value": "https://gistcdn.githack.com/Tixyel/d76fdd3feea9b907a2b5f8f6be372f31/raw/f7031981eb2a6d6331be4f0f280df8af3e0a1b52/simulation.js",\n    "group": "Debug Settings"\n  }\n}\n',
        },
      ],
    },
    {
      name: 'finished',
      files: [
        { fileName: 'HTML.txt', content: `` },
        { fileName: 'SCRIPT.txt', content: `` },
        { fileName: 'CSS.txt', content: `` },
        { fileName: 'CF.txt', content: `` },
      ],
    },
    { name: 'widget.io' },
  ],
}
